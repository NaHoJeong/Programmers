// 카카오 프렌즈 컬러링북
// bfs를 이용해 풀이
  // x좌표, y좌표 각각 queue를 선언하고 찾고자하는 색과 같으며, 인접해있으면 각 좌표를 x, y queue에 대입
  
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
int number_of_area = 0;
int max_size_of_one_area = 0;

vector<int> solution(int m, int n, vector<vector<int>> picture) {
	number_of_area = 0;
	max_size_of_one_area = 0;
	vector<int> answer(2, 0);

	vector<vector<int>> visit(m, vector<int>(n, 0));

	int area = 0;
	queue<int> x; // 기준이 되는 x좌표
	queue<int> y; // 기준이 되는 y좌표

	bool chk = false;
 
	int dx[4] = { 0, 0, 1, -1 };
	int dy[4] = { 1, -1, 0, 0 };

  int max_val = 0; // 각 영역의 크기
	while (1)
	{
      chk = false;
      max_val = 0;

      // 새롭게 탐색할 좌표와 색 추출
      for(int i = 0 ; i < m ; i++)
      {
          for(int j = 0 ; j < n ; j++)
          {
              // 새로운 색, 좌표를 찾았을 경우
              if(visit[i][j] == 0 && picture[i][j] != 0)
              {
                  x.push(i);
                  y.push(j);
                  visit[i][j] = 1;
                  max_val++;
                  area = picture[i][j];
                  chk = true;
                  break;
              }
          }
          if(chk == true)
              break;
      }

      // 새롭게 탐색할 영역이 없다면 종료
      if(x.empty())
          break;

      // 현재 탐색하는 영역으로 모두 탐색
      while (!x.empty())
      {
          // 인접한 영역 탐색
          for (int i = 0; i < 4; i++)
          {
              if (x.front() + dx[i] == m || y.front() + dy[i] == n || x.front() + dx[i] < 0 || y.front() + dy[i] < 0)
                  continue;
              // 현재까지 탐색하지 않았으며, 조건에 만족할 경우, 인접한 좌표를 queue에 대입 후 해당 영역의 크기 +1
              if (visit[x.front() + dx[i]][y.front() + dy[i]] == 0)
              {
                  if (picture[x.front() + dx[i]][y.front() + dy[i]] == area)
                  {
                      x.push(x.front() + dx[i]);
                      y.push(y.front() + dy[i]);
                      visit[x.front() + dx[i]][y.front() + dy[i]] = 1;
                      max_val++;
                  }
              }
          }
          
          // 현재 위치에 해당하는 부분은 모두 탐색했으므로 queue에서 제거
          x.pop();
          y.pop();
        
          // 최대 영역 추출
          if(max_size_of_one_area < max_val)
              max_size_of_one_area = max_val;
        }
        
        // 현재 탐색하는 영역이 끝났으면 하나의 영역이므로 
        number_of_area++;
	}

    answer[0] = number_of_area;
    answer[1] = max_size_of_one_area;
    
	return answer;
}
