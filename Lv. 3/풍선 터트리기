// 풍선 터트리기, lv. 3
    // 인접한 두 숫자 중 작은 숫자를 삭제할 수 있는 것은 최대 한번
    // --> 끝까지 남기고 싶은 숫자는 왼쪽 부분과 오른쪽 부분와 비교를 통해 남길 수 있는 여부 파악
        // 만약 어느 한 쪽의 최솟값보다 작으면 남길 수 있음(임의의 숫자가 커지는 경우는 한번 또는 0번 나오므로, 이 때만 작은 숫자 없애면 가능)
        // 두 쪽의 최솟값보다 크다면 끝까지 남길 수 없음(양 쪽의 값들과 비교할 때, 두 번의 비교에서 값이 더 큼. 하지만 작은 숫자를 삭제할 수 있는 횟수는 1번 이므로 X)

#include <string>
#include <vector>

using namespace std;

int solution(vector<int> a) {
    int answer = 0;
    int min_val = 1000000000;
    int idx = -1;
    // 왼쪽 부분과 오른쪽 부분의 최솟값을 찾을 때, 양쪽에 for문을 이용해 최솟값을 찾을 수 있지만, 시간 초과
        // 최솟값을 찾은 뒤 왼쪽 부분과 오른쪽 부분을 나눠서 비교
            // 왼쪽 부분에 있는 임의의 값을 기준으로 할 때, 오른쪽 부분의 최솟값은 알고 있으며, 왼쪽 부분의 경우 index 0부터 남길 수 있는지 판단하며 최솟값 갱신
            // 오른쪽 부분의 임의의 값 역시, 왼쪽 부분의 최솟값은 알고있으며, 맨 뒤(index가 size-1)부터 남길 수 있는지 판단하며 최솟값 
    for(int i = 0 ; i < a.size() ; i++)
    {
        if(min_val > a[i])
        {
            min_val = a[i];
            idx = i;
        }
    }
    int right = a[a.size() - 1];
    int left = a[0];
    if(a.size() < 3)
        return a.size();
    else
    {
        //answer += 3;
        for(int i = 0 ; i < idx ; i++)
        {
            //cout << i << " ";
            if(left > a[i])
                left = a[i];
            
            /*
            if(left > a[i - 1])
                left = a[i - 1];
            if(right == a[i])
            {
                right = 1000000000;
                for(int j = i + 1 ; j < a.size() ; j++)
                    if(right > a[j])
                        right = a[j];
            }
            */
            if(a[i] > left)
                continue;
            else
                answer++;
        }
        for(int i = a.size() - 1 ; i >= idx ; i--)
        {
            //cout << i << " ";
            if(right > a[i])
                right = a[i];
            if(a[i] > right)
                continue;
            else
                answer++;
        }
    }
    
    return answer;
}
