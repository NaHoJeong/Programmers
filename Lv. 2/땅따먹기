// 땅따먹기
// DP를 이용해 위에서 내려가면서 해당 층에 위치할 때, 각 땅이 얻을 수 있는 최댓값을 해당 땅에 대입
  // 1 2 3 4
  // 5 6 7 8 
  // 일 경우 5 6 7 8에 해당하는 층에 도달할 경우, 각 땅이 가질 수 있는 최댓값(위에서부터 합한 값의 최대)를 대입
    // --> 9(5+4) 10(6+4) 11(7+4) 11(8+3)
      // 만약 아래의 최댓값을 찾은 뒤 합하면 X --> 1층의 1번이 최대일 때, 그 아래 층의 1번이 매우 큰 최대라면 성립 X
      
#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
using namespace std;

int solution(vector<vector<int> > land)
{
	int answer = 0;
    for(int i = 1 ; i < land.size() ; i++)
    {
        // 각 층에서 가질 수 있는 최댓값으로 변환
        land[i][0] += max(max(land[i - 1][1], land[i - 1][2]), land[i - 1][3]);
        land[i][1] += max(max(land[i - 1][0], land[i - 1][2]), land[i - 1][3]);
        land[i][2] += max(max(land[i - 1][0], land[i - 1][1]), land[i - 1][3]);
        land[i][3] += max(max(land[i - 1][0], land[i - 1][1]), land[i - 1][2]);
    }
    // for문이 끝난다면 맨 마지막 층에는 각 땅에서 얻을 수 있는 최댓값이 도출
    
    sort(land[land.size() - 1].rbegin(), land[land.size() - 1].rend()); // 내림차순으로 맨 마지막 층만 정렬
    answer = land[land.size() - 1][0]; // 맨 마지막 층의 맨 앞의 수가 최댓값
	return answer;
}
