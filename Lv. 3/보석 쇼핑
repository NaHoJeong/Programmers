// 보석 쇼핑
// 투포인터 알고리즘 이용

#include <string>
#include <vector>
#include <map>

using namespace std;

vector<int> solution(vector<string> gems) {
    vector<int> answer(2, 0);
    
    map<string, int> m; // 주어진 보석의 종류 개수
    map<string, int> ans; // 현재 구입한 보석의 종류 및 개수
    
    int a_size = 100001;
    
    // 주어진 보석의 종류를 알기 위해
    for(int i = 0 ; i < gems.size() ; i++)
    {
        if(m.find(gems[i]) == m.end() || m.size() == 0)
            m[gems[i]] = 1;
        else
            m[gems[i]]++;
    }
    
    int left = 0, right = 0;
    int temp = 0;
    
    // left(시작), right(끝)을 모두 0으로 하고 시작
      // 모든 종류의 보석을 구매하지 못했으면, right를 오른쪽으로 한 칸 이동하며 구입
      // 모든 종류의 보석을 구매했으면, left를 오른쪽으로 한 칸 이동하여 길이를 줄임
    while(1)
    {
        // 모든 종류의 보석을 구매하지 못했으면, right 이동
        if(ans.size() < m.size())
        {
            
            if(ans.find(gems[right]) == ans.end())
                ans[gems[right]] = 1;
            else
                ans[gems[right]]++;
            right++;
        }
        
        // 모든 종류의 보석을 구매했으면, left를 오른쪽으로 이동
          // 이 때, map의 find를 이용해 해당 보석의 value(구매 개수)에 -1, 
        else if(ans.size() == m.size())
        {
            ans[gems[left]]--;
            if(ans[gems[left]] == 0)
                ans.erase(gems[left]);
            left++;
        }
        
        // right가 맨 오른쪽으로 이동했으면 모든 부분 탐색
          // 모든 종류의 보석을 구매하지 못했다면 종료, 아니면 left를 이동시켜 최단 거리 계산
        if(right == gems.size())
        {
            if(ans.size() < m.size())
                break;          
        }
        
        // 모든 종류의 보석을 구매할 수 있다면, 길이 비교를 통해 최소 길이 갱신
          // 그 후, left와 right 갱신
        if(ans.size() == m.size())
        {
            temp = abs(right - left);
            if(a_size > temp)
            {
                a_size = temp;
                answer[0] = left + 1;
                answer[1] = right;
            }
        }        
    }
    
    return answer;
}
