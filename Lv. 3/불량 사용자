// 불량 사용자
// dfs를 이용해 가능한 모든 경우의 수를 구한 뒤 정렬을 통한 중복 제거로 답 추출

#include <string>
#include <vector>
#include <algorithm>

using namespace std;
vector<vector<string>> ans; // 가능한 모든 경우의 수
vector<string> s; // dfs를 이용해 경우의 수를 구하기 위함
// dfs를 이용하여 경우의 수 추출
int dfs(vector<string> user_id, vector<string> banned_id, vector<int> visit, int start)
{
    // 불량 사용자에 대한 경우를 모두 찾았을 경우
    if(start == banned_id.size())
    {
        ans.push_back(s);
        return 0;
    }
    
    bool chk = false; // 현재 찾고 있는 불량 사용자와 아이디가 같은지 체크
    for(int i = 0 ; i < user_id.size() ; i++)
    {
        chk = false;
        // 탐색하지 않았으며, 불량 사용자의 아이디와 이용자의 아이디의 길이가 같을 경우
        if(visit[i] == 0 && user_id[i].length() == banned_id[start].length())
        {
            // 불량 사용자인지 판별
            for(int j = 0 ; j < user_id[i].length() ;j++)
            {
                // 불량 사용자와 현재까지의 아이디가 같을 경우
                if(banned_id[start][j] == '*')
                    continue;
                if(banned_id[start][j] == user_id[i][j])
                    continue;
                else // 불량 사용자와 현재까지의 아이디가 다를 경우 break
                {
                    chk = true;
                    break;
                }
            }
            if(chk == false) // chk가 true면 현재 찾고 있는 불량 사용자 x, false면 불량 사용자
            {
                s.push_back(user_id[i]); // 정답의 후보군을 위함
                visit[i] = 1;
                dfs(user_id, banned_id, visit, start + 1); // 다음 불량 사용자 탐색
                visit[i] = 0;
                s.pop_back();
            }
        }
    }
    return 0;
}

int solution(vector<string> user_id, vector<string> banned_id) {
    int answer = 0;
    vector<int> visit(user_id.size(), 0);
    dfs(user_id, banned_id, visit, 0); // 정답의 후보군 탐색
    
    // 불량 사용자가 아예 없을 경우
    if(ans.size() == 0)
        return 0;
    
    // 중복 제거를 위한 정렬
      // 각 벡터를 정렬
    for(int i = 0 ; i <ans.size() ; i++)
        sort(ans[i].begin(), ans[i].end());
      // 전체 벡터를 정렬({a,b,c}, {b,c,d}, {b,c,a}인 경우, 위의 정렬을 한다면 {a,b,c}가 붙어 있지 않아 중복 제거 복잡
    sort(ans.begin(), ans.end());
    
    // 중복 제거를 위한 비교 벡터 선언
    vector<string>comp;
    for(int i = 0 ; i < ans[0].size() ; i++)
        comp.push_back(ans[0][i]);
    
    answer++; // 맨 처음(비교하기 위한 벡터) 경우의 수
    // 모든 정렬이 끝났으므로, 현재와 그 다음 벡터가 중복인지 아닌지만 판별하면 모든 중복 제거
      // 정렬하지 않았다면 이중 for문을 이용해야 함
    bool chk = false;
    for(int i = 0 ; i < ans.size() ; i++)
    {
        chk = false;
        for(int j = 0 ; j < ans[i].size() ; j++)
        {
            if(chk == true) // chk가 true면 중복이 아님
            {
                comp[j] = ans[i][j]; // 비교를 위한 벡터를 새로운 벡터로 
                continue;
            }
            else
            {
                if(ans[i][j] == comp[j])
                    continue;
                else
                {
                    chk = true;
                    answer++; // 중복이 아니므로 answer++
                }
                comp[j] = ans[i][j];
            }
        }
    }
    return answer;
}
