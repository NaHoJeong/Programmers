// 삼각 달팽이
// 방향 3개(아래 오른쪽 위)에 따라 계속 끝까지 가며 정렬, 그 후 순서대로 배열에 대입

#include <string>
#include <vector>

using namespace std;

vector<int> solution(int n) {
    vector<int> answer;
    vector<vector<int>> ans(n, vector<int>(n, 0));
    int sum = 0; // 나올 수 있는 가장 큰 수
    int temp = n;
    while(temp > 0)
    {
        sum += temp;
        temp--;
    }

    // 3 방향
    int dx[3] = {1, 0, -1};
    int dy[3] = {0, 1, -1};
    
    // 방향에 따른 배열
    int s_x = 0;
    int s_y = 0;
    
    int num = 0; // 정렬할 수
    int cnt = 0; // 방향
    
    // 나올 수 있는 수까지 나오면 종료
    // 방향을 계속 바꾸며, 끝에 도달하거나, 다음 자리에 숫자가 있으면 방향을 변경
    while(num < sum)
    {
        num++;
        ans[s_x][s_y] = num;
        
        // 끝에 도달하거나 다음 자리에 숫자가 있으면 방향 변경
        if(s_x + dx[cnt] < n && s_y + dy[cnt] < n && ans[s_x + dx[cnt]][s_y + dy[cnt]] == 0)
        {   
            s_x += dx[cnt];
            s_y += dy[cnt];
        }
        else // 방향이 한번 돌았으면 0으로 변경
        {
            cnt++;
            if (cnt == 3) cnt = 0;
            s_x += dx[cnt];
            s_y += dy[cnt];
        }
    }
  
    정렬한 순서대로 정답에   
    for(int i = 0 ; i < n ; i++)
    {
        for(int j = 0 ; j < n ; j++)
        {
            if(ans[i][j] == 0)
                continue;
            else
                answer.push_back(ans[i][j]);
        }
    }
    
    return answer;
}
