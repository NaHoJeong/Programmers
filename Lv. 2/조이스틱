// 조이스틱
// 각 자리의 알파벳을 A로 만들 때 걸리는 횟수를 우선 계산
// 자릿 수 이동 시, 가장 가운데에 있는 알파벳을 탐색(A는 무시하며, A가 아닌 중간 수)
  // 그 후, 오른쪽부터 알파벳을 바꾸면 최소인지 왼쪽부터 알파벳을 바꾸면 최소인지 판별 후 답 계산

#include <string>
#include <vector>

using namespace std;

int solution(string name) {
    int answer = 0;
    
    // 모든 알파벳을 A로 만들기 위한 횟수
    for(int i = 0 ; i < name.length() ; i++)
    {    
        if(name[i] - 'A' < 'Z' - name[i] + 1)
            answer += name[i] - 'A';
        else
            answer += 'Z' - name[i] + 1;
    }
    
    // A가 아닌 가장 중간의 알파벳의 위치 탐색
    bool chk_A = false;
    int cnt = 0;
    int idx = -1;
    for(int i = 1 ; i < name.length() ; i++)
    {
        if(name[i] == 'A')
        {
            if(chk_A == false) // 어디서부터 A가 시작되는지
            {
                chk_A = true;
                idx = i;
            }
            cnt++; // A의 개수
        }
        if(name[i] != 'A' && chk_A == true)
            break;
    }
    
    // 왼쪽과 오른쪽 중 어디를 먼저 거쳐야 최소가 되는지 판단
    int temp1 = 0;
    int temp2 = 0;
    int len = 0;
    // A가 없을 경우
    if(idx == -1)
        len = name.length() - 1;
    else
    {
        // 중간부터 시작해서 A가 끝일 경우
        if(idx + cnt == name.length())
            len = name.length() - cnt - 1;
            
        // A가 중간에 있을 경우, 왼쪽과 오른쪽 비교
        else
        {
            temp1 = (idx - 1)*2 + (name.length() - cnt - idx); // 정방향(오른쪾)으로 먼저 간 후 왼쪽으로 가는 경우
            temp2 = idx - 1 + (name.length() - cnt- idx)*2; // 역방향(왼쪽)으로 먼저 간 후 오른쪽으로 가는 경우
            if(temp1 > temp2)
                len = temp2;
            else
                len = temp1;
        }
    }
    // 정방향으로 쭉 탐색하는게 더 빠를 경우
    if(len > name.length() - 1)
        len = name.length() - 1;
    answer += len;
    
    
    return answer;
}
