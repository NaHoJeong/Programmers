// 다리를 지나는 트럭
// queue를 이용

#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(int bridge_length, int weight, vector<int> truck_weights) {
	int answer = 0;
    
    queue<int> bridge; // 현재 다리 위에 있는 트럭의 무게
    queue<int> time; // 현재 다리 위에 있는 트럭이 언제 들어갔는지
    
    int cnt = 0, sum = 0; // cnt는 현재까지 다리를 지나지 않은 트럭의 순서, sum은 다리 위에 있는 트럭 무게의 합
    // cnt가 트럭의 개수가 되면 while문 탈출 --> 맨 마지막 트럭이 다리 위에 진입하자마자 while문 탈출
    while(cnt < truck_weights.size())
    {
        answer++; // 시간 흐름
        if(time.size() > 0 && answer - time.front() == bridge_length) // 다리의 가장 앞에 있는 트럭이 빠져나올 때
        {
            // 다리의 가장 앞에 있는 트럭의 정보 삭제(들어간 시간, 무게)
            time.pop();
            sum -= bridge.front(); // 빠져나간 트럭의 무게 빼기
            bridge.pop();
        }
        
        // 현재 다리 위에 있는 트럭과 들어 올 트럭의 무게의 합이 다리가 견딜 수 있는 무게보다 작을 경우, 트럭이 다리에 진입
        // 새로운 트럭의 정보를 queue에 push(시간, 무게), 다리 위에 있는 트럭의 합(sum) 갱신
        if(sum + truck_weights[cnt] <= weight)
        {
            sum += truck_weights[cnt];
            bridge.push(truck_weights[cnt]);
            time.push(answer);
            cnt++;
        }
    }
    // 맨 마지막 트럭이 다리에 진입하는 순간 while문을 빠져나오므로 해당 트럭이 빠져나오는 시간(다리의 길이)을 더해서 답 계산
    answer += bridge_length;
    
	return answer;
}
