// 가장 먼 노드
// bfs를 이용해 1번 노드에서 각 노드까지의 최단 거리 계산

#include <string>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

int solution(int n, vector<vector<int>> edge) {
    int answer = 1;
    
    // 노드 숫자가 인덱스가 되게끔... 편히 보이게..
    // 0 번째는 그냥 사용 X
    vector<int> cnt(n + 1, 0); // 각 노드의 최단 간선 개수
    vector<int> visit(n + 1, 0);
    visit[0] = 1; // 인덱스 0은 사용 X
    visit[1] = 1; // 인덱스 1은 출발점 -> 방문 O
   
    queue<int> qu;
    qu.push(1);
    
    // bfs를 이용해서 간선 개수 계산
    while(!qu.empty())
    {
        for(int i = 0 ; i < edge.size() ; i++)
        {
            // 연결되어 있으며, 탐색하지 않은 곳
            if(visit[edge[i][1]] == 0 && edge[i][0] == qu.front())
            {
                qu.push(edge[i][1]);
                visit[edge[i][1]] = 1;
                cnt[edge[i][1]] = cnt[edge[i][0]] + 1;
            }
            if(visit[edge[i][0]] == 0 && edge[i][1] == qu.front())
            {
                qu.push(edge[i][0]);
                visit[edge[i][0]] = 1;
                cnt[edge[i][0]] = cnt[edge[i][1]] + 1;
            }
        }
        qu.pop();
    }
    
    // 답 구하는 첫 번째 방법(두 번째 방법보다 시간이 약간 더 빠름)
    int temp = 0;
    
    // 최대 간선 거리 추출
    for(int i = 0 ; i < cnt.size() ; i++)
    {
        if(temp < cnt[i])
            temp = cnt[i];
    }
    
    // 최대 간선 개수와 같은 것 answer
    for(int i = 0 ; i < cnt.size() ; i++)
    {
        if(temp > cnt[i])
            continue;
        else
            answer++;
    }
    
    /*
    // 내림차순
    sort(cnt.rbegin(), cnt.rend());
    
    for(int i = 1 ; i < cnt.size() ; i++)
    {
        if(cnt[0] == cnt[i])
            answer++;
        else
            break;
    }
    */
    
    return answer;
}
