// 소수 만들기
// dfs를 이용해 모든 숫자 조합을 찾고, 에라토스테네스의 체를 이용해 소수인지 판별

#include <vector>
#include <iostream>
#include "math.h"
#include <algorithm>

using namespace std;

vector<int> ans; // 모든 숫자 조합
int dfs(vector<int> nums, vector<int> visit, int num, int cnt, int sum)
{
    // 숫자가 3개인 조합을 찾았으면
    if(cnt == num)
    {
        ans.push_back(sum);
        return 0;
    }
    
    for(int i = 0 ; i < nums.size() ; i++)
    {
        if(visit[i] == 0)
        {
            visit[i] = 1;
            dfs(nums, visit, num, cnt + 1, sum + nums[i]);
            // visit[i] = 0; // visit을 다시 0으로 하지 않는 이유 --> 1 2 3의 합과 1 3 2의 합은 같기 때문(순서는 달라도 같은 수)
        }
    }
    
    return 0;
}

int solution(vector<int> nums) {
    int answer = 0;
    
    vector<int> visit(nums.size() , 0);

    dfs(nums, visit, 3, 0, 0);
    
    sort(ans.rbegin(), ans.rend()); // 가장 큰 수를 찾기 위해
    
    // 인덱스 +1(해당 숫자)가 소수인지 아닌지 판별
    vector<int> prime(ans[0] + 1, 0);

    //0이 소수 , 1은 소수 X
    for(int i = 2 ; i <= sqrt(ans[0]) ; i++)
    {
        // 소수인 수를 찾았으면, 해당 수의 배수가 되는 것들은 소수 X)
        if(prime[i] == 0)
            for(int j = 2 * i ; j <= ans[0] ; j += i)
                prime[j] = 1;
    }
    
    // 이전에 찾은 숫자 조합(ans)이 소수면 answer에 +1
    for(int i = 0 ; i < ans.size() ;i++)
        if(prime[ans[i]] == 0)
            answer++;
    
    return answer;
}
