// 길 찾기 게임, lv. 3
// Tree, 재귀함수

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>

using namespace std;

vector<vector<int>> temp;
vector<int> t(2, 0);
vector<int> post;
int binary(vector<vector<int>> ans) // 트리처럼 연결된 것들 탐색, 재귀함수
{
    if(ans.size() == 1)
        post.push_back(ans[0][2]); // 
    if(ans.size() < 2)
        return 0;
    
    vector<vector<int>> right;
    vector<vector<int>> left;

    int stand_x = ans[0][0];
    int stand_y = ans[0][1];
    
    bool left_chk = false;
    bool right_chk = false;
    
    for(int i = 1 ; i < ans.size() ; i++)
    {
        if(stand_x > ans[i][0] && stand_y > ans[i][1])
        {
            if(left_chk == false)
            {
                left_chk = true;
                t[0] = ans[0][2];
                t[1] = ans[i][2];
                temp.push_back(t);
            }
            left.push_back(ans[i]);
        }
        else if(stand_x < ans[i][0] && stand_y > ans[i][1])
        {
            if(right_chk == false)
            {
                right_chk = true;
                t[0] = ans[0][2];
                t[1] = ans[i][2];
                temp.push_back(t);
            }
            right.push_back(ans[i]);
        }
    }
    
    binary(left);
    binary(right);
    
    post.push_back(ans[0][2]); // 후위 순회
    
    return 0;
}

// y축 기준으로 정렬
bool cmp(vector<int> a, vector<int> b)
{
    if(a[1] > b[1])
        return true;
    else if(a[1] == b[1])
    {
        if(a[0] > b[0])
            return false;
        else
            return true;
    }
    else
        return false;
}

// 전위순회
vector<int> pre;
int preorder(vector<vector<int>> temp, int start, vector<int> visit)
{
    pre.push_back(start);
    for(int i = 0 ; i < temp.size() ; i++)
    {
        if(start == temp[i][0] && visit[temp[i][1]] == 0)
        {
            visit[temp[i][1]] = 1;
            preorder(temp, temp[i][1], visit);
        }
    }
    
    return 0;
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
    vector<vector<int>> answer;
    vector<vector<int>> ans;
    vector<int> ans_temp(3, 0);
    
    // 입력된 노드가 1개라면 답은 (1,1)
    if(nodeinfo.size() == 1)
    {
        vector<int> ex;
        ex.push_back(1);
        answer.push_back(ex);
        answer.push_back(ex);
        return answer;
    }
    
    // 주어진 좌표들과 노드의 순번을 하나의 벡터로
    for(int i = 0 ; i < nodeinfo.size(); i++)
    {
        ans_temp[0] = nodeinfo[i][0];
        ans_temp[1] = nodeinfo[i][1];
        ans_temp[2] = i+1;
        ans.push_back(ans_temp);
    }
    
    sort(ans.begin(), ans.end(), cmp); // y축 좌표를 기준으로 내림차순
    
    binary(ans); // 연결된 노드들 탐색
    
    vector<int> visit_pre(nodeinfo.size() + 1, 0); // 전위순회를 위한 visit, 인덱스와 노드 순번을 같게하기 위해
    visit_pre[temp[0][0]] = 1; // 가장 초기(root)노드는 방문 O
    visit_pre[0] = 1; // 0번째 인덱스는 사용하지 않을 것이므로 
    preorder(temp, temp[0][0], visit_pre); // 전위 순회
    answer.push_back(pre);
    
    vector<int> visit_post(nodeinfo.size() + 1, 0);
    
    answer.push_back(post);
    
    return answer;
}
