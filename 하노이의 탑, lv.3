// 하노이의 탑, lv 3
// 재귀 함수

#include <string>
#include <vector>

using namespace std;

vector<vector<int>> answer;
vector<int> ans(2, 0);

// 재귀 함수 이용
int hanoi(int cur_n, int start, int dest, int space)
{
	// 현재 원판의 개수가 1일 경우
    if(cur_n == 1)
    {
        ans[0] = start;
        ans[1] = dest;
        answer.push_back(ans);
        return 0;   
    }
    
	// 현재 원판의 개수가 1보다 클 경우, 가장 큰(아래에 있는) 원판을 제외한 다른 원판은 여유공간으로
	// ex) n = 4일 경우, 3개를 여유공간으로 -> 나머지 한 개(가장 큰 원판)를 목적지 탑으로 -> 나머지(여유공간에 있는) 원판을 목적지 탑으로
    hanoi(cur_n - 1 , start, space, dest);
    hanoi(1, start, dest, space);
    hanoi(cur_n - 1 , space, dest, start);
    
    return 0;
}

vector<vector<int>> solution(int n) {
    
    hanoi(n, 1, 3, 2); // 주어진 원판의 개수, 시작 탑, 목적지 탑, 여유공간
    return answer;
}

