// 점프와 순간 이동, lv. 2
// DP...?
    // 1칸을 이동할 경우는 +1이지만, 해당 자리 x2로 이동하는 경우는 배터리 사용 X --> 1칸은 최소로 이동하며, x2 이동을 최대한 많이
    // 목표 지점을 2로 나누며 x2로 먼저 이동, 만약 홀수일 경우(2로 나누지 못할 경우) 1칸 이동해야 하므로 배터리 1 소모

#include <iostream>
using namespace std;

int solution(int n)
{
    int answer = 0;
    
    // n이 0이라면 출발점이므로 종료
    // 목표 지점부터 시작하며, n이 0일 경우 출발 지점이므로 종료
    while(n > 0)
    {
        if(n % 2 == 0) // 짝수 일 경우, x2로 이동하며 배터리 소모 x
            n /= 2;
        else // 홀수 일 경우, -1하며 1칸 이동
        {
            answer++;
            n--;
        }
    }
    return answer;
}
