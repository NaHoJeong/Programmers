// 여행경로
// dfs를 이용해 가능한 답의 후보 탐색 후 알파벳이 빠른 것을 

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

vector<vector<string>> ans;
int dfs(vector<vector<string>> tickets, vector<int> visit, vector<string> ans_temp, string start)
{
    if(ans_temp.size() == tickets.size() + 1)
    {
        ans.push_back(ans_temp);
        return 0;
    }
    
    for(int i = 0 ; i < tickets.size() ; i++)
    {
        if(visit[i] == 0 && start == tickets[i][0])
        {
            visit[i] = 1;
            ans_temp.push_back(tickets[i][1]);
            dfs(tickets, visit, ans_temp, tickets[i][1]);
            ans_temp.erase(ans_temp.begin() + ans_temp.size() - 1);
        }
    }
    return 0;
}

vector<string> solution(vector<vector<string>> tickets) {
    vector<string> answer;
    vector<int> visit(tickets.size(), 0);
    
    vector<string> ans_temp;
    ans_temp.push_back("ICN");
    
    // dfs 사용
    // bfs 사용하려 했는데 다양한 반례가... 고치려면... 너무 어려움
        // 출발지가 중복일 경우, 알파벳이 빠른 걸로 하려했으나 문제 발생
            // [ICN, AA], [ICN, BB], [BB, AA]
    // dfs 이용하여 가능한 경우를 모두 구한 후 정렬을 이용해서 알파벳이 빠른 것을 답으로
    dfs(tickets, visit, ans_temp, "ICN");
    
    sort(ans.begin(), ans.end());
    answer = ans[0];
    
    return answer;
}
