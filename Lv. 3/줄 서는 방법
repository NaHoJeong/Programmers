// 줄 서는 방법
// dfs를 이용하여 모든 조합을 구한 후 답에 맞는 조합을 가져오려 했지만 시간초과
// 사전 순에 따라 규칙을 찾고 각 순서에 맞는 숫자를 계산

#include <string>
#include <vector>

using namespace std;

vector<int> ans_temp;
vector<vector<int>> ans;

// dfs 이용(시간초과)
int dfs(int n, vector<int> visit, int num)
{
    if(num == n)
    {
        ans.push_back(ans_temp);
        return 0;
    }
    for(int i = 0 ; i < n ; i++)
    {
        if(visit[i] == 0)
        {
            visit[i] = 1;
            ans_temp.push_back(i+1);
            dfs(n, visit, num + 1);
            ans_temp.pop_back();
            visit[i] = 0;
        }
    }
    return 0;
}

vector<int> solution(int n, long long k) {
    vector<int> answer;
    
    vector<int> ans;
    long long sum = 1; // n-1까지 곱
    ans.push_back(1);
    for(int i = 1 ;i < n ; i++)
    {
        sum *= i; // n-1까지의 곱
        ans.push_back(i + 1); // 배치해야 하는 숫자들
    }
    
    int temp = n-1;
    k--; // 순서를 1부터가 아닌 0부터 보기 위해
    
    long long m = 0; // 원하는 순서 k를 sum으로 나눈 몫
    long long r = 0; // 원하는 순서 k를 sum으로 나눈 나머지
    
    // 찾고자 하는 순서와 존재할 수 있는 조합의 개수, 이 둘 사이의 관계를 통해 맨 앞부터 들어갈  계산
    while(1)
    {
        m = k/sum;
        r = k%sum;
        answer.push_back(ans[m]); // 맨 앞의 숫자부터 입력
        ans.erase(ans.begin() + m); // 답에 넣은 숫자는 제거(중복되지 않으므로)
        
        // 모든 숫자가 입력됐을 경우
        if(answer.size() == n)
            break;
        k = r;
        sum /= temp;
        temp--;
    }
   
    // dfs를 이용하여 사전 순으로 모든 조합을 구한 뒤 원하는 순서에 맞는 조합을 정답으로
    // 시간 초과
    /*
    long long sum = 1;
    for(int i = 1 ;i < n ; i++)
        sum *= i;
    k--;
    
    long long m = k/sum;
    long long r = k%sum;
    answer.push_back(m + 1);
    
    vector<int>visit(n, 0);
    visit[m] = 1;
    dfs(n, visit, 1);
    
    for(int i = 0 ; i < ans[r].size() ; i++)
        answer.push_back(ans[r][i]);
    */
  
    return answer;
}
