// 보행자 천국
// DP를 이용해 풀이
  // 해당 위치에 도달할 수 있는 경우의 수 = 바로 위의 경우의 수 + 바로 왼쪽의 경우의 수
  // 경우의 수를 따질 때, 2가지 방향(수평, 수직)을 따로 생각
    // 0일 경우, 수평, 수직 경우의 수는 모두 합한 값
    // 1이면 모두 0
    // 2이면 수평 방향의 경우는 왼쪽의 경우의 수, 수직 방향의 경우는 위쪽의 경우의 수
    
#include <vector>

using namespace std;

int MOD = 20170805;
int answer = 0;

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
int solution(int m, int n, vector<vector<int>> city_map) {
    answer = 0;
    MOD = 20170805;
    
    int cnt[501][501][2] = {0}; // 0인 성분은 무시(모두 방향의 경우의 수 0)
    cnt[1][1][0] = 1; // 1,1이 출발지점, 모든 방향의 경우는 1
    cnt[1][1][1] = 1;
    
    // DP를 이용한 풀이
    for(int i = 1 ; i <= m ; i++)
    {
        for(int j = 1 ; j <= n ; j++)
        {
            if(i == 1 && j == 1) // 출발점
                continue;
            // 1일 경우, 모두 0
            if(city_map[i - 1][j - 1] == 1)
            {
                cnt[i][j][0] = 0;
                cnt[i][j][1] = 0;
            }
            // 2일 경우, 각 방향 성분에 따라 한 가지의 경우만 따름
            else if(city_map[i - 1][j - 1] == 2)
            {
                cnt[i][j][0] = cnt[i - 1][j][0];
                cnt[i][j][1] = cnt[i][j - 1][1];
            }
            // 1일 경우 모든 방향으로 이동가능 하므로 수평+수직 방향의 경우
            else
            {
                cnt[i][j][0] = (cnt[i - 1][j][0]%MOD + cnt[i][j - 1][1]%MOD)%MOD;
                cnt[i][j][1] = (cnt[i][j][0]);
            }
        }
    }
    
    // 도착지점의 city_map은 1이므로 수평 방향이나 수직 방향은 항상 
    answer = cnt[m][n][0];
    
    return answer;
}
