// 짝지어 제거하기
// Stack을 이용, 제거되지 않은 알파벳은 stack에 넣으며, stack의 top부분과 다음 나오는 알파벳을 비교하여 제거
  // 초기 이중 for문 및 투포인터를 이용해 해결하려 했지만 시간초과
  
  #include <iostream>
#include <string>
#include <vector>
#include <stack>

using namespace std;

int solution(string s)
{
    int answer = 0;
    stack<int> st;
    
    if(s.length() % 2 == 1)
        return 0;
    
    st.push(s[0]);
    for(int i = 1 ; i < s.length() ; i++)
    {
        // stack에 아무런 값이 없다면 제거될 수 없으므로 stack에 쌓음
        if(st.size() == 0)
        {
            st.push(s[i]);
            continue;
        }
        
        // 가장 최근에 쌓은 것과 다음 올 알파벳과 비교하여 같으면 짝지어 제거
        if(st.top() == s[i])
            st.pop();
        else
            st.push(s[i]);
    }
    // stack에 아무것도 쌓이지 않았다면 모두 
    if(st.size() == 0)
        answer = 1;
    else
        answer = 0;
    
    // 투포인터를 이용한 풀이, but 시간초과
    /*
    int cnt = 0, start = 0, end = 1;
    while(end < s.length())
    {
        while(s[start] == s[end] && s[start] != '0')
        {
            s[start] = '0';
            s[end] = '0';
            start--;
            end++;
            while(s[start] == '0')
                start--;
            while(s[start] == '0')
                end++;
            
            cnt++;
            if (start < 0 || end > s.length())
                break;
        }
        if (start < 0 && end > s.length())
            break;
       
        start = end;
        end++;
    }

    if(s.length() / 2 == cnt)
        answer = 1;
    */
    
    return answer;
}
