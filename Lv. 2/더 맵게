// 더 맵게
// 우선순위 큐 이용, 가장 맵지 않은 것을 이용하여 새로운 값 계산 후 우선순위 큐에 넣음
  // 우선순위 큐 맨 앞에 있는 값이 원하는 값보다 크면 끝

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int solution(vector<int> scoville, int K) {
    int answer = 0;
    priority_queue<int, vector<int>, greater<int>> pq;
    
    // 우선순위 큐에 대입
    for(int i = 0 ; i < scoville.size() ; i++)
        pq.push(scoville[i]);
        
    // 가장 맵지 않은 두 값을 이용해 새로운 값 계산
    while(pq.top() < K)
    {
        answer++;
        int new_s = 0;
        new_s += pq.top();
        pq.pop();
        new_s += pq.top() * 2;
        pq.pop();
        
        pq.push(new_s);
        
        // K 값으로 만들 수 없으면 종료
        if(pq.size() == 1 && pq.top() < K)
        {
            answer = -1;
            break;
        }
    }
    
    return answer;
}
