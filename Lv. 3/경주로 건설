// 경주로 건설
// bfs를 이용하되 각 지역의 건설 비용을 이전의 최소에 더해줬지만, 모든 방향(4방향)에 해당하는 비용을 모두 계산

#include <string>
#include <vector>
#include <queue>

using namespace std;

int solution(vector<vector<int>> board) {
	int answer = 0;

  // 4 방향
	int dx[4] = { 0, 1, 0, -1 };
	int dy[4] = { 1, 0, -1, 0 };
  
  // 현재의 x, y좌표 및 방향
	int x = 0;
	int y = 0;
	int d = 0;

	queue<pair<int, int>> route; // queue에 들어갈 좌표(x, y)
	queue<int> direction; // queue에 들어갈 방향
	int cost[25][25][4]; // 4 방향에 해당하는 비용(가장 큰 값으로 초기화)
    for(int i = 0 ; i < 25 ; i++)
        for(int j = 0 ; j < 25 ; j++)
            for(int k = 0 ; k < 4 ; k++)
                cost[i][j][k] = 10000000;

    // 출발점의 비용은 0
	cost[0][0][0] = 0;
  cost[0][0][1] = 0;
  cost[0][0][2] = 0;
  cost[0][0][3] = 0;
  
  // 초기(0, 1)과 (1, 0)에 대한 값 대입
	if (board[0][1] == 0)
	{
		direction.push(0);
		cost[0][1][0] = 100;
		route.push(make_pair(0, 1));
	}
	if (board[1][0] == 0)
	{
		direction.push(1);
		cost[1][0][1] = 100;
		route.push(make_pair(1, 0));
	}

  // bfs 형식으로 탐색
	while (!route.empty())
	{
    // 현재의 좌표와 방향
		x = route.front().first;
		y = route.front().second;
		d = direction.front();
    
    // 현재의 위치에서 모든 방향의 비용 계산 후 대입
		for (int i = 0; i < 4; i++)
		{
      // 벽이 있거나 size를 벗어난 경우
			if (x + dx[i] < 0 || x + dx[i] >= board.size() || y + dy[i] < 0 || y + dy[i] >= board.size())
				continue;

			else
			{
				if (board[x + dx[i]][y + dy[i]] == 1)
					continue;
        // 방향이 같으면 + 100, 그 후 다음 좌표의 방향에 해당하는 값과 비교하여 작은 값 대입
				if (d == i)
				{
					if (cost[x + dx[i]][y + dy[i]][i] >= cost[x][y][i] + 100)
					{
						  cost[x + dx[i]][y + dy[i]][i] = cost[x][y][i] + 100;
              direction.push(i);
              route.push(make_pair(x + dx[i], y + dy[i]));
					}
				}
        
        // 방향이 다르면+ 600, 그 후 다음 좌표의 방향에 해당하는 값과 비교하여 작은 값 대입
				else
				{
					if(cost[x + dx[i]][y + dy[i]][i] >= cost[x][y][d] + 600)
					{
						  cost[x + dx[i]][y + dy[i]][i] = cost[x][y][d] + 600;
              direction.push(i);
              route.push(make_pair(x + dx[i], y + dy[i]));
					}
				}
			}
		}
		direction.pop();
		route.pop();
	}

    // 각 방향에 해당하는 비용이 계산되었으며, 목적지에 해당하는 비용들 중 최소의 값을 
    answer = cost[board.size() - 1][board.size() - 1][0];
    for(int i = 1 ; i < 4 ; i++)
        if(answer > cost[board.size() - 1][board.size() - 1][i])
            answer = cost[board.size() - 1][board.size() - 1][i];
    
	return answer;
}
