// 다음 큰 숫자
// 이진수로 바꾼 후 0과 1로 이루어진 곳을 찾아냄(가장 뒤에 있는 수)
  // 0을 1로, 1을 0으로 변경, 그 뒤부터 1의 개수를 찾아낸 뒤 1의 개수가 같은 가장 작은 숫자 만들기

#include <string>
#include <vector>
#include <stack>
#include <iostream>

using namespace std;

int solution(int n) {
    int answer = 0;
    
    vector<int> binary;
    stack<int> st;
    
    // 이진수 만들기
    while(n > 0)
    {
        st.push(n%2);
        n /= 2;
    }
    binary.push_back(0);
    
    while(!st.empty())
    {
        binary.push_back(st.top());
        st.pop();
    }
    
    // 01로 이루어진 부분을 찾아낸 후 그 뒤에 1의 개수
    int cnt = 0;
    int idx = 0;
    for(int i = 0 ; i < binary.size() ; i++)
    {
        if(binary[i] == 1)
            cnt++;
        if(i == binary.size() - 1)
            break;
        if(binary[i] == 0 && binary[i+1] ==1) // 가장 뒤에 있는 01을 알기 위해 계속해서 01 찾아냄 
        {
            idx = i;
            cnt = 0; // 그 후의 1의 개수를 알기 위해
        }
    }
    cnt--; // 바꿔줄 부분에 1이 있으며, 이를 고려했으므로

    // 0과 1 변경(01을 10으로)
    binary[idx] = 1;
    binary[idx + 1] = 0;
    
    // 그 뒤의 1의 개수로 가장 작은 숫자 만들기
    for(int i = idx + 2 ; i < binary.size(); i++)
        binary[i] = 0;
    
    for(int i = binary.size() - 1 ; i >= binary.size()  - cnt ;i--)
        binary[i] = 1;
    
    // 이진수를 다시 
    int temp = 1;
    for(int i = binary.size() - 1 ; i >= 0 ; i--)
    {
        answer += temp * binary[i];
        temp *= 2;
    }
    
    return answer;
}
